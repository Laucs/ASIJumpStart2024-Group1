@using static ASI.Basecode.Resources.Views.AnalyticsScreen
@using static ASI.Basecode.Resources.Views.ReportGenerationTable
@model ASI.Basecode.Services.ServiceModels.SummaryViewModel

@{
    ViewData["Title"] = "Wallet";
    var isDarkMode = Context.Request.Cookies["darkMode"] == "true";
}

@await Html.PartialAsync("Sidebar")
@await Html.PartialAsync("ProfileRibbon")

<div class="flex h-screen w-screen flex-row dark:bg-black">
    <div class="hidden h-full w-1/6 md:flex">
    </div>
    <div class="h-screen w-full md:w-5/6">
        <div class="h-auto min-h-screen w-full rounded-lg bg-gray-100 from-violet-950 to-slate-950 p-4 dark:bg-gradient-to-b md:p-8">
            <div class="overflow-y-auto rounded-md bg-gray-100 px-8 py-6 dark:bg-transparent">
                <div class="flex-1">
                    <h2 class="flex items-center gap-2 text-2xl font-bold text-violet-500 dark:text-white">
                        My Budget
                    </h2>
                </div>
                <div class="mb-6 mt-5 flex flex-col items-center justify-between gap-2">
                    <div class="flex h-full w-full items-center justify-center md:w-1/2">
                        <div class="relative flex h-52 w-96 flex-col gap-1 rounded-3xl bg-gradient-to-br from-slate-950 to-violet-950 p-6 text-green-600 shadow-md shadow-black duration-300 hover:scale-105">
                            <label id="budgetlabel" class="text-xl font-bold tracking-wide text-white">Budget</label>
                            <p class="text-lg font-bold text-green-500" id="selectedCategoryBalance">
                                ₱0.00
                            </p>
                            <img class="absolute bottom-8 left-8 h-[23px] w-[30px]" src="/img/Subtract.png" />
                            <div class="absolute bottom-4 right-4 h-4 w-4 rounded-full bg-green-500"></div>
                            <div class="absolute bottom-4 right-6 h-4 w-4 rounded-full bg-violet-500"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-5 flex h-20 flex-col">
                <p class="mb-2 text-lg font-medium dark:text-white">Category Budgets</p>
                <div class="flex h-full flex-row items-center gap-5">
                    <select id="categoryBudgetSelect" class="w-96 rounded-lg border px-4 py-2" onchange="showCategoryBalance(this.value)">
                        <option value="">Select Category</option>
                        @foreach (var category in Model.CategoryAnalytics.Categories)
                        {
                            <option value="@category.CategoryId|@category.CategoryTitle">@category.CategoryTitle</option>
                        }
                    </select>
                    <div>
                        <button type="button"
                                onclick="openAddFundsModal()"
                                class="h-10 whitespace-nowrap rounded-full bg-violet-500 px-8 py-2 font-bold text-white drop-shadow-lg duration-300 hover:bg-violet-800">
                            + Add Funds
                        </button>
                    </div>
                </div>
            </div>
            <div class="mt-5 flex flex-col gap-2">
                <p class="mb-2 text-lg font-medium dark:text-white">Balance History</p>
                <!--- Add Foreach Statement Here to render the balance/transaction history --->
                <div class="px-5">
                    <div class="flex h-20 flex-row items-center justify-between rounded-md bg-white px-8 py-4 duration-300 hover:scale-105 dark:shadow-md dark:bg-transparent">
                        <div class="flex flex-col">
                            <label class="dark:text-white">Food Category</label>
                            <label class="text-sm text-gray-400">11/12/2024</label>
                        </div>
                        <label class="text-lg font-semibold text-green-400">+₱300.00</label>
                    </div>
                    <!--- If makaya add a pagination para ma handle if daghan kaayo og transaction history--->
                    <div class="mt-5 flex w-full flex-row justify-end gap-4 px-4">
                        <button class="dark:text-white">1</button>
                        <button class="dark:text-white">2</button>
                        <button class="dark:text-white">3</button>
                        <button class="dark:text-white">4</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        // Add this check to ensure Swal is available
        if (typeof Swal === 'undefined') {
            console.error('SweetAlert2 is not loaded!');
        }

        // Add this function at the top of your script section
        function validateModalNumber(input) {
            // Remove any non-numeric characters except decimal point
            let value = input.value.replace(/[^\d.]/g, '');

            // Ensure only one decimal point
            const decimalCount = (value.match(/\./g) || []).length;
            if (decimalCount > 1) {
                value = value.replace(/\.+$/, '');
            }

            // Limit to 2 decimal places this to it
            if (value.includes('.')) {
                const parts = value.split('.');
                value = `${parts[0]}.${parts[1].slice(0, 2)}`;
            }

            // Update input value
            input.value = value;
        }

        function openAddFundsModal() {
            console.log('Opening modal');

            const categories = @Html.Raw(Json.Serialize(Model.CategoryAnalytics.Categories));

            Swal.fire({
                title: 'Add Funds to Budget',
                html: `
                                    <div class="mb-4">
                                        <label class="mb-2 block text-gray-700">Select Category</label>
                                        <select id="categorySelect" class="mb-4 w-full rounded-lg border p-3">
                                            <option value="">Select a Category</option>
                                            ${categories.map(cat =>
                    `<option value="${cat.categoryId}">${cat.categoryTitle}</option>`
                ).join('')}
                                        </select>

                                        <label class="mb-2 block text-gray-700">Amount</label>
                                        <input type="text"
                                               id="amountInput"
                                               class="mb-4 w-full rounded-lg border p-3"
                                               placeholder="Enter amount"
                                               onkeypress="return (event.charCode >= 48 && event.charCode <= 57) || event.charCode === 46"
                                               oninput="validateModalNumber(this)">

                                        <button type="button"
                                                onclick="handleResetBudget()"
                                                class="w-full rounded-lg bg-red-500 p-3 text-white hover:bg-red-600">
                                            Reset Budget
                                        </button>
                                    </div>
                                `,
                showCancelButton: true,
                confirmButtonText: 'Add Funds',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#8b5cf6',
                cancelButtonColor: '#6b7280',
                preConfirm: () => {
                    const amountInput = document.getElementById('amountInput');
                    const categorySelect = document.getElementById('categorySelect');
                    const amount = parseFloat(amountInput.value);
                    const categoryId = categorySelect.value;

                    if (!categoryId) {
                        Swal.showValidationMessage('Please select a category');
                        return false;
                    }

                    if (!amount || isNaN(amount) || amount <= 0) {
                        Swal.showValidationMessage('Please enter a valid amount greater than 0');
                        return false;
                    }

                    return { amount, categoryId: parseInt(categoryId) };
                }
            }).then((result) => {
                if (result.isConfirmed && result.value) {
                    const selectedAmount = result.value.amount;
                    const selectedCategoryId = result.value.categoryId;

                    fetch('/Analytics/AddAmount', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            categoryId: selectedCategoryId,
                            amount: selectedAmount
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            // Show success message regardless of response.ok
                            toastr.success(`Successfully added ₱${selectedAmount.toLocaleString('en-US', { minimumFractionDigits: 2 })} to budget`);

                            // Update the dropdown and balance
                            const categoryBudgetSelect = document.getElementById('categoryBudgetSelect');
                            categoryBudgetSelect.value = selectedCategoryId;

                            // Update the balance display
                            showCategoryBalance(selectedCategoryId);

                            // Close the modal
                            Swal.close();
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            });
        }

        async function handleResetBudget() {
            const categorySelect = document.getElementById('categorySelect');
            if (!categorySelect.value) {
                toastr.error('Please select a category');
                return;
            }

            const categoryId = parseInt(categorySelect.value);
            const categoryTitle = categorySelect.options[categorySelect.selectedIndex].text;

            // First check if category has expenses
            const response = await fetch(`/Analytics/CheckCategoryExpenses?categoryId=${categoryId}`);
            const data = await response.json();

            if (data.hasExpenses) {
                // Show confirmation dialog for expense deletion
                Swal.fire({
                    title: 'Warning',
                    html: `This category (${categoryTitle}) has existing expenses.<br>Do you want to delete all related expenses and reset the budget?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, reset everything',
                    cancelButtonText: 'Cancel',
                    confirmButtonColor: '#ef4444',
                    cancelButtonColor: '#6b7280',
                }).then((result) => {
                    if (result.isConfirmed) {
                        resetBudgetAndExpenses(categoryId, categoryTitle);
                    }
                });
            } else {
                // If no expenses, just reset the budget
                resetBudget(categoryId, categoryTitle);
            }
        }

        async function resetBudgetAndExpenses(categoryId, categoryTitle) {
            try {
                const response = await fetch('/Analytics/ResetBudgetAndExpenses', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ categoryId: categoryId })
                });

                const data = await response.json();
                if (data.success) {
                    toastr.success(`Successfully reset budget and expenses for ${categoryTitle}`);

                    setTimeout(function () {
                        location.reload();
                    }, 2000);
                } else {
                    toastr.error(data.message || 'An error occurred');
                }

            } catch (error) {
                console.error('Error:', error);
                toastr.error('An error occurred while resetting budget and expenses');
            }
        }

        // Add this new function to update all balance displays
        async function updateAllBalances() {
            try {
                // Update category balance if a category is selected
                const selectedCategoryId = document.getElementById('categoryBudgetSelect').value;
                if (selectedCategoryId) {
                    await showCategoryBalance(selectedCategoryId);
                }

                // Update total budget if that element exists
                const totalBudgetResponse = await fetch('/Analytics/GetTotalBudget');
                const totalBudgetData = await totalBudgetResponse.json();
                if (totalBudgetData.success) {
                    const totalBudgetElement = document.getElementById('totalBudget');
                    if (totalBudgetElement) {
                        totalBudgetElement.textContent = `₱${parseFloat(totalBudgetData.totalBudget).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                    }
                }

                // Force refresh of any charts or other UI elements
                if (typeof updateCharts === 'function') {
                    updateCharts();
                }
            } catch (error) {
                console.error('Error updating balances:', error);
            }
        }

        function resetBudget() {

            const categorySelect = document.getElementById('categorySelect');
            if (!categorySelect.value) {
                toastr.error('Please select a category');
                return;
            }
            const categoryId = categorySelect.value ? parseInt(categorySelect.value) : null;
            const budgetType = categorySelect.options[categorySelect.selectedIndex].text;

            Swal.fire({
                title: 'Reset Budget?',
                text: `Are you sure you want to reset the ${budgetType}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, reset it',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Analytics/ResetBudget', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(categoryId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            toastr.success(`Sucessfully reset budget for  ${budgetType}`);
                        })
                        .catch(error => {
                        });
                }
            });
        }

        // Add this to test if the function is being called
        document.querySelector('button[onclick="openAddFundsModal()"]').addEventListener('click', function (e) {
            console.log('Button clicked');
            openAddFundsModal();
        });

        // Success messages
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }

        // Update showCategoryBalance function to be more robust
        async function showCategoryBalance(selectedValue) {
            const balanceElement = document.getElementById('selectedCategoryBalance');

            var [categoryId, categoryTitle] = selectedValue.split('|');

            if (!categoryId) {
                balanceElement.textContent = '₱0.00';
                return;
            }

            try {
                const response = await fetch(`/Analytics/GetCategoryBalance?categoryId=${categoryId}`);
                const data = await response.json();

                if (data.success) {
                    const formattedBalance = `₱${parseFloat(data.balance).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                    balanceElement.textContent = formattedBalance;

                    const budgetLabel = document.getElementById('budgetlabel');

                    if (categoryId) {
                        categoryTitle = `${categoryTitle}`; // Update the variable
                    } else {
                        categoryTitle = "Budget"; // Reset to default
                    }

                    // Dynamically update the label
                    budgetLabel.textContent = categoryTitle;
                    // Also update any other UI elements that show the balance
                    updateAllBalances();

                } else {
                    throw new Error(data.message || 'Error fetching balance');
                }
            } catch (error) {
                console.error('Error:', error);
                balanceElement.textContent = '₱0.00';
                toastr.error('Error updating balance');
            }
        }

        // Add this function to handle the category selection change
        function handleCategoryChange(categoryId) {
            if (categoryId) {
                showCategoryBalance(categoryId);
            } else {
                document.getElementById('selectedCategoryBalance').textContent = '₱0.00';
            }
        }

        // Update the event listener
        document.getElementById('categoryBudgetSelect').addEventListener('change', function (e) {
            handleCategoryChange(this.value);
        });
    </script>
}
