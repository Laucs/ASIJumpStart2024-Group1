@using static ASI.Basecode.Resources.Views.AnalyticsScreen
@using static ASI.Basecode.Resources.Views.ReportGenerationTable
@model ASI.Basecode.Services.ServiceModels.SummaryViewModel

@{
    ViewData["Title"] = "Summary";
    var isDarkMode = Context.Request.Cookies["darkMode"] == "true";

}

@await Html.PartialAsync("Sidebar")
@await Html.PartialAsync("ProfileRibbon")

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<div class="flex h-auto w-screen flex-row dark:bg-black">
    <div class="hidden h-full w-1/6 md:flex">
    </div>
    <div class="h-auto w-full md:w-5/6">
                    <div class="p-8">
                        <div class="wallet-section p-6 bg-white rounded-xl shadow-lg dark:bg-violet-950 mb-8 transition-all duration-300">
                            <div class="flex justify-between items-center mb-6 gap-2">
                <div class="flex-1">
                    <h2 class="text-2xl font-bold text-violet-500 dark:text-white flex items-center gap-2"> 
                        My Budget
                    </h2>
                </div>
                <div>
                    <button type="button" 
                            onclick="openAddFundsModal()" 
                            class="bg-violet-500 text-white px-4 py-2 rounded-lg hover:bg-violet-600 transition-colors duration-200 text-sm font-medium whitespace-nowrap">
                        + Add Funds
                    </button>
                </div>
            </div>
                <div class="bg-gray-50 dark:bg-violet-900 p-5 rounded-xl">
                    <div class="flex flex-col">
                        <p class="text-gray-600 dark:text-gray-300 text-sm font-medium mb-2">Category Budgets</p>
                        <select id="categoryBudgetSelect" class="w-full p-3 border rounded-lg mb-2" onchange="showCategoryBalance(this.value)">
                            <option value="">Select Category</option>
                            @foreach (var category in Model.CategoryAnalytics.Categories)
                            {
                                <option value="@category.CategoryId">@category.CategoryTitle</option>
                            }
                        </select>
                        <p class="text-2xl font-bold text-green-600" id="selectedCategoryBalance">
                            ₱0.00
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="h-auto w-full rounded-t-lg bg-gray-100 from-violet-950 to-slate-950 dark:bg-gradient-to-b">
            <div class="flex h-full flex-col md:p-8">
                <div class="credential-gradient flex h-full w-full flex-col rounded-lg py-8 shadow-sm shadow-black dark:shadow-lg md:flex-row">
                    <div class="flex h-1/2 w-full flex-col px-8 md:w-1/2 md:h-full">
                        @await Html.PartialAsync("_TotalExpense")
                    </div>
                    @await Html.PartialAsync("_CategorySummary", Model.SummaryAnalytics)
                </div>
            </div>
        </div>
        @await Html.PartialAsync("_ReportTable", Model.CategoryAnalytics)
        <div class="h-auto bg-gray-100 px-8 pb-20 pt-8 dark:bg-slate-950">
            <div class="flex flex-col gap-5">
                <label class="text-2xl font-bold text-violet-500 dark:text-white">@ExpenseTrends</label>
            </div>
            <canvas class="mt-5" id="lineChart" width="400" height="200"></canvas>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add this check to ensure Swal is available
        if (typeof Swal === 'undefined') {
            console.error('SweetAlert2 is not loaded!');
        }

        // Add this function at the top of your script section
        function validateModalNumber(input) {
            // Remove any non-numeric characters except decimal point
            let value = input.value.replace(/[^\d.]/g, '');
            
            // Ensure only one decimal point
            const decimalCount = (value.match(/\./g) || []).length;
            if (decimalCount > 1) {
                value = value.replace(/\.+$/, '');
            }
            
            // Limit to 2 decimal places
            if (value.includes('.')) {
                const parts = value.split('.');
                value = `${parts[0]}.${parts[1].slice(0, 2)}`;
            }
            
            // Update input value
            input.value = value;
        }

        function openAddFundsModal() {
            console.log('Opening modal');
            
            const categories = @Html.Raw(Json.Serialize(Model.CategoryAnalytics.Categories));
            
            Swal.fire({
                title: 'Add Funds to Budget',
                html: `
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2">Select Category</label>
                        <select id="categorySelect" class="w-full p-3 border rounded-lg mb-4">
                            <option value="">Select a Category</option>
                            ${categories.map(cat => 
                                `<option value="${cat.categoryId}">${cat.categoryTitle}</option>`
                            ).join('')}
                        </select>

                        <label class="block text-gray-700 mb-2">Amount</label>
                        <input type="text" 
                               id="amountInput" 
                               class="w-full p-3 border rounded-lg"
                               placeholder="Enter amount"
                               onkeypress="return (event.charCode >= 48 && event.charCode <= 57) || event.charCode === 46"
                               oninput="validateModalNumber(this)">
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Add Funds',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#8b5cf6',
                cancelButtonColor: '#6b7280',
                preConfirm: () => {
                    const amountInput = document.getElementById('amountInput');
                    const categorySelect = document.getElementById('categorySelect');
                    const amount = parseFloat(amountInput.value);
                    const categoryId = categorySelect.value;

                    if (!categoryId) {
                        Swal.showValidationMessage('Please select a category');
                        return false;
                    }

                    if (!amount || isNaN(amount) || amount <= 0) {
                        Swal.showValidationMessage('Please enter a valid amount greater than 0');
                        return false;
                    }

                    return { amount, categoryId: parseInt(categoryId) };
                }
            }).then((result) => {
                if (result.isConfirmed && result.value) {
                    const selectedAmount = result.value.amount;
                    const selectedCategoryId = result.value.categoryId;

                    fetch('/Analytics/AddAmount', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            categoryId: selectedCategoryId,
                            amount: selectedAmount
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Show success message regardless of response.ok
                        toastr.success(`Successfully added ₱${selectedAmount.toLocaleString('en-US', { minimumFractionDigits: 2 })} to budget`);
                        
                        // Update the dropdown and balance
                        const categoryBudgetSelect = document.getElementById('categoryBudgetSelect');
                        categoryBudgetSelect.value = selectedCategoryId;
                        
                        // Update the balance display
                        showCategoryBalance(selectedCategoryId);
                        
                        // Close the modal
                        Swal.close();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                }
            });
        }

        // Add this new function to update all balance displays
        async function updateAllBalances() {
            try {
                // Update category balance if a category is selected
                const selectedCategoryId = document.getElementById('categoryBudgetSelect').value;
                if (selectedCategoryId) {
                    await showCategoryBalance(selectedCategoryId);
                }

                // Update total budget if that element exists
                const totalBudgetResponse = await fetch('/Analytics/GetTotalBudget');
                const totalBudgetData = await totalBudgetResponse.json();
                if (totalBudgetData.success) {
                    const totalBudgetElement = document.getElementById('totalBudget');
                    if (totalBudgetElement) {
                        totalBudgetElement.textContent = `₱${parseFloat(totalBudgetData.totalBudget).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                    }
                }

                // Force refresh of any charts or other UI elements
                if (typeof updateCharts === 'function') {
                    updateCharts();
                }
            } catch (error) {
                console.error('Error updating balances:', error);
            }
        }

        function resetBudget() {
            const categorySelect = document.getElementById('categorySelect');
            const categoryId = categorySelect.value ? parseInt(categorySelect.value) : null;
            const budgetType = categorySelect.options[categorySelect.selectedIndex].text;

            Swal.fire({
                title: 'Reset Budget?',
                text: `Are you sure you want to reset the ${budgetType}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, reset it',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Analytics/ResetBudget', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(categoryId)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            toastr.success(data.message);
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            toastr.error(data.message || 'Failed to reset budget');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        toastr.error('An error occurred while resetting the budget');
                    });
                }
            });
        }

        // Add this to test if the function is being called
        document.querySelector('button[onclick="openAddFundsModal()"]').addEventListener('click', function(e) {
            console.log('Button clicked');
            openAddFundsModal();
        });

        // Success messages
        var successMessage = '@TempData["SuccessMessage"]';
        var loginSuccess = '@TempData["LoginSuccess"]';
        if (successMessage) {
            toastr.success(successMessage);
        }
        if (loginSuccess) {
            toastr.success(loginSuccess);
        }

        // Update showCategoryBalance function to be more robust
        async function showCategoryBalance(categoryId) {
            const balanceElement = document.getElementById('selectedCategoryBalance');
            
            if (!categoryId) {
                balanceElement.textContent = '₱0.00';
                return;
            }
            
            try {
                const response = await fetch(`/Analytics/GetCategoryBalance?categoryId=${categoryId}`);
                const data = await response.json();
                
                if (data.success) {
                    const formattedBalance = `₱${parseFloat(data.balance).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                    balanceElement.textContent = formattedBalance;
                    
                    // Also update any other UI elements that show the balance
                    updateAllBalances();
                } else {
                    throw new Error(data.message || 'Error fetching balance');
                }
            } catch (error) {
                console.error('Error:', error);
                balanceElement.textContent = '₱0.00';
                toastr.error('Error updating balance');
            }
        }

        // Add this function to handle the category selection change
        function handleCategoryChange(categoryId) {
            if (categoryId) {
                showCategoryBalance(categoryId);
            } else {
                document.getElementById('selectedCategoryBalance').textContent = '₱0.00';
            }
        }

        // Update the event listener
        document.getElementById('categoryBudgetSelect').addEventListener('change', function(e) {
            handleCategoryChange(this.value);
        });
    </script>
}