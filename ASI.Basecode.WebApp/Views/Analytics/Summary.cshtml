@using static ASI.Basecode.Resources.Views.AnalyticsScreen
@using static ASI.Basecode.Resources.Views.ReportGenerationTable
@model ASI.Basecode.Services.ServiceModels.SummaryViewModel

@{
    ViewData["Title"] = "Summary";
    var isDarkMode = Context.Request.Cookies["darkMode"] == "true";

}

@await Html.PartialAsync("Sidebar")
@await Html.PartialAsync("ProfileRibbon")

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<div class="flex h-auto w-screen flex-row dark:bg-black">
    <div class="hidden h-full w-1/6 md:flex">
    </div>
    <div class="h-auto w-full md:w-5/6">
        <div class="h-auto w-full rounded-t-lg bg-gray-100 from-violet-950 to-slate-950 dark:bg-gradient-to-b">
            <div class="flex h-full flex-col md:p-8">
                <div class="credential-gradient flex h-full w-full flex-col rounded-lg py-8 shadow-sm shadow-black dark:shadow-lg md:flex-row">
                    <div class="flex h-1/2 w-full flex-col px-8 md:w-1/2 md:h-full">
                        @await Html.PartialAsync("_TotalExpense")
                    </div>
                    @await Html.PartialAsync("_CategorySummary", Model.SummaryAnalytics)
                </div>
            </div>
        </div>
        <div class="bg-gray-100 px-8 py-6 dark:bg-slate-950">
            <div class="mb-6 flex items-center justify-between gap-2">
                <div class="flex-1">
                    <h2 class="flex items-center gap-2 text-2xl font-bold text-violet-500 dark:text-white">
                        My Budget
                    </h2>
                </div>
                <div>
                    <button type="button"
                            onclick="openAddFundsModal()"
                            class="whitespace-nowrap rounded-lg bg-violet-500 px-4 py-2 text-sm font-medium text-white transition-colors duration-200 hover:bg-violet-600">
                        + Add Funds
                    </button>
                </div>
            </div>
            <div class="flex h-20 flex-row">
                <div class="flex h-full w-1/2 flex-col justify-center">
                    <p class="mb-2 text-lg font-medium dark:text-white">Category Budgets</p>
                    <select id="categoryBudgetSelect" class="mb-2 w-full rounded-lg border p-3" onchange="showCategoryBalance(this.value)">
                        <option value="">Select Category</option>
                        @foreach (var category in Model.CategoryAnalytics.Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryTitle</option>
                        }
                    </select>
                </div>
                <div class="flex h-full w-1/2 items-center justify-center">
                    <div class="relative flex h-24 w-48 flex-col gap-1 rounded-md bg-slate-950 p-3 text-green-600 shadow-md shadow-black">
                        <label class="font-bold tracking-wide text-white">Wallet Budget</label>
                        <p class="font-bold text-green-500" id="selectedCategoryBalance">
                            ₱0.00
                        </p>
                        <div class="absolute bottom-4 right-4 h-4 w-4 rounded-full bg-green-500"></div>
                    </div>
                </div>
            </div>
        </div>
        @await Html.PartialAsync("_ReportTable", Model.CategoryAnalytics)
        <div class="h-auto bg-gray-100 px-8 pb-20 pt-8 dark:bg-slate-950">
            <div class="flex flex-col gap-5">
                <label class="text-2xl font-bold text-violet-500 dark:text-white">@ExpenseTrends</label>
            </div>
            <canvas class="mt-5" id="lineChart" width="400" height="200"></canvas>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add this check to ensure Swal is available
        if (typeof Swal === 'undefined') {
            console.error('SweetAlert2 is not loaded!');
        }

        function openAddFundsModal() {
            console.log('Opening modal');

            // Get categories from your model and log it to check the data
            const categories = @Html.Raw(Json.Serialize(Model.CategoryAnalytics.Categories));
            console.log('Categories:', categories); // Debug log

            Swal.fire({
                title: 'Add Funds to Budget',
                html: `
                                                <div class="mb-4">
                                                    <label class="mb-2 block text-gray-700">Select Budget Type</label>
                                                    <select id="categorySelect" class="mb-4 w-full rounded-lg border p-3">
                                                        <option value="">Select a Category</option>
                                                        <option value="0">Overall Budget</option>
                                                        ${categories.map(cat =>
                    `<option value="${cat.categoryId}">${cat.categoryTitle}</option>`
                ).join('')}
                                                    </select>

                                                    <label class="mb-2 block text-gray-700">Amount</label>
                                                    <input type="text"
                                                           id="amountInput"
                                                           class="w-full rounded-lg border p-3"
                                                           placeholder="Enter amount"
                                                           onkeypress="return (event.charCode >= 48 && event.charCode <= 57) || event.charCode === 46"
                                                           oninput="validateModalNumber(this)">
                                                </div>
                                                <div class="text-right">
                                                    <button type="button"
                                                            onclick="resetBudget()"
                                                            class="text-sm text-red-500 hover:text-red-700">
                                                        Reset Budget
                                                    </button>
                                                </div>
                                                    `,
                showCancelButton: true,
                confirmButtonText: 'Add Funds',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#8b5cf6',
                cancelButtonColor: '#6b7280',
                didOpen: () => {
                    window.validateModalNumber = function (input) {
                        input.value = input.value.replace(/[^0-9.]/g, '');
                        var decimalCount = (input.value.match(/\./g) || []).length;
                        if (decimalCount > 1) {
                            input.value = input.value.slice(0, -1);
                        }
                        if (input.value.includes('.')) {
                            var parts = input.value.split('.');
                            if (parts[1].length > 2) {
                                input.value = parts[0] + '.' + parts[1].slice(0, 2);
                            }
                        }
                    };
                },
                preConfirm: () => {
                    const amountInput = document.getElementById('amountInput');
                    const amount = parseFloat(amountInput.value);
                    const categoryId = document.getElementById('categorySelect').value;

                    if (!amount || isNaN(amount) || amount <= 0) {
                        Swal.showValidationMessage('Please enter a valid amount greater than 0');
                        return false;
                    }
                    return { amount, categoryId: categoryId ? parseInt(categoryId) : null };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Analytics/AddAmount', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(result.value)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Update the relevant balance display based on category
                                if (data.categoryId) {
                                    const categoryBalance = document.querySelector(`#category-${data.categoryId}-balance`);
                                    if (categoryBalance) {
                                        categoryBalance.textContent = `₱${parseFloat(data.newBalance).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                                    }
                                } else {
                                    document.getElementById('remainingBalance').textContent =
                                        `₱${parseFloat(data.newBalance).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                                }

                                toastr.success(data.message);
                                setTimeout(() => {
                                    window.location.reload();
                                }, 1500);
                            } else {
                                toastr.error(data.message || 'Failed to add funds');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            toastr.error('An error occurred while processing your request');
                        });
                }
            });
        }

        function resetBudget() {
            const categorySelect = document.getElementById('categorySelect');
            const categoryId = categorySelect.value ? parseInt(categorySelect.value) : null;
            const budgetType = categorySelect.options[categorySelect.selectedIndex].text;

            Swal.fire({
                title: 'Reset Budget?',
                text: `Are you sure you want to reset the ${budgetType}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, reset it',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Analytics/ResetBudget', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(categoryId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                toastr.success(data.message);
                                setTimeout(() => {
                                    window.location.reload();
                                }, 1500);
                            } else {
                                toastr.error(data.message || 'Failed to reset budget');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            toastr.error('An error occurred while resetting the budget');
                        });
                }
            });
        }

        // Add this to test if the function is being called
        document.querySelector('button[onclick="openAddFundsModal()"]').addEventListener('click', function (e) {
            console.log('Button clicked');
            openAddFundsModal();
        });

        // Success messages
        var successMessage = '@TempData["SuccessMessage"]';
        var loginSuccess = '@TempData["LoginSuccess"]';
        if (successMessage) {
            toastr.success(successMessage);
        }
        if (loginSuccess) {
            toastr.success(loginSuccess);
        }

        // Update showCategoryBalance to refresh total when category changes
        async function showCategoryBalance(categoryId) {
            if (!categoryId) return;

            try {
                const response = await fetch(`/Analytics/GetCategoryBalance?categoryId=${categoryId}`);
                const data = await response.json();
                if (data.success) {
                    document.getElementById('selectedCategoryBalance').textContent =
                        `₱${parseFloat(data.balance).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;
                }
            } catch (error) {
                console.error('Error fetching category balance:', error);
            }
        }
    </script>
}
