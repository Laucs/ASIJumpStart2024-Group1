@using static ASI.Basecode.Resources.Views.ExpenseScreen
@model ASI.Basecode.Services.ServiceModels.ExpenseViewModel
@{
    ViewData["Title"] = "Expense";
    var categories = ViewData["Categories"] as List<string>;
}

@await Html.PartialAsync("Sidebar")
@await Html.PartialAsync("ProfileRibbon")

<div class="flex h-screen w-screen flex-row dark:bg-black">
    <div class="hidden h-full w-1/6 md:flex"></div>
    <div class="h-auto w-full md:w-5/6">
        <div class="flex h-auto w-full flex-row rounded-lg bg-gray-100 from-violet-950 to-slate-950 p-8 dark:bg-gradient-to-b">
            <div class="w-full md:w-1/2">
                <label class="text-2xl font-bold text-violet-500 dark:text-white">Expense Management</label>

                <!-- Form begins here -->
                <form asp-action="PostExpense" asp-controller="Expense" method="post" class="mt-5 flex flex-col gap-3">
                    <!-- Category Dropdown -->
                    <div class="flex flex-col gap-2">
                        <label class="text-lg font-bold text-black dark:text-white">Category <span class="text-red-500">*</span></label>
                        <select id="categoryInput" asp-for="CategoryId" class="rounded-lg border-zinc-600 px-4 py-2 text-black dark:bg-violet-950 dark:border-2 dark:text-white dark:placeholder:text-white" required>
                            <option value="">Select a Category</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.CategoryId">@category.CategoryTitle</option>
                            }
                        </select>
                        @if (ViewData["CategoryError"] != null)
                        {
                            <p class="mt-1 text-red-500">@ViewData["CategoryError"]</p>
                        }
                    </div>

                    <!-- Title/Name of Expense -->
                    <div class="flex flex-col gap-2">
                        <label class="text-lg font-bold text-black dark:text-white">Expense Name <span class="text-red-500">*</span></label>
                        <input id="expenseInput" asp-for="ExpenseName" type="text" class="rounded-lg border-zinc-600 px-4 py-2 dark:text-white dark:bg-violet-950 dark:border-2 dark:placeholder:text-white" placeholder="Expense Title" required />
                        <span asp-validation-for="ExpenseName" class="text-red-500"></span>
                    </div>

                    <!-- Amount -->
                    <div class="flex flex-col gap-2">
                        <label class="text-lg font-bold text-black dark:text-white">Amount <span class="text-red-500">*</span></label>
                        <input id="amountInput"
                               asp-for="Amount"
                               type="text"
                               class="rounded-lg border-zinc-600 px-4 py-2 dark:text-white dark:bg-violet-950 dark:border-2 dark:placeholder:text-white"
                               placeholder="10000"
                               required
                               onkeypress="return (event.charCode >= 48 && event.charCode <= 57) || event.charCode === 46"
                               oninput="validateNumber(this)" />
                        <span asp-validation-for="Amount" class="text-red-500"></span>
                    </div>

                    <!-- Date -->
                    <div class="flex flex-col gap-2">
                        <label class="text-lg font-bold text-black dark:text-white">Date <span class="text-red-500">*</span></label>
                        <input id="dateInput" asp-for="CreatedDate" type="date" max="3000-12-31" value="@DateTime.Today" class="rounded-lg border-zinc-600 px-4 py-2 dark:text-white dark:bg-violet-950 dark:border-2 dark:placeholder:text-white" required />
                        <span asp-validation-for="CreatedDate" class="text-red-500"></span>
                    </div>

                    <!-- Description -->
                    <div class="flex flex-col gap-2">
                        <label class="text-lg font-bold text-black dark:text-white">Description <span class="text-red-500">*</span></label>
                        <textarea id="descriptionInput" asp-for="Description" class="min-h-32 resize-none rounded-lg border-zinc-600 px-4 py-2 dark:text-white dark:bg-violet-950 dark:border-2 dark:placeholder:text-white" placeholder="Expense Description" required></textarea>
                        <span asp-validation-for="Description" class="text-red-500"></span>
                    </div>

                    <!-- Submit Button -->
                    <div class="mt-2 flex w-full items-center justify-center">
                        <button id="submitBtn" type="submit" class="w-32 rounded-full bg-violet-500 py-2 font-bold text-white drop-shadow-lg duration-300 hover:bg-violet-800">
                            Submit
                        </button>
                    </div>
                </form>
            </div>

            <!-- Design elements (optional) -->
            <div class="opacity-10 absolute right-0 w-1/2 md:relative md:z-0 md:opacity-100">
                <div class="opacity-80 relative top-40 h-64 w-64 rounded-full bg-violet-300 dark:bg-violet-800 md:right-0.5 md:absolute"></div>
                <div class="opacity-80 relative right-32 h-64 w-64 rounded-full bg-violet-300 dark:bg-violet-800 md:bottom-28 md:absolute"></div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
       
        function validateNumber(input) {
    // Remove any non-numeric characters except decimal point
    input.value = input.value.replace(/[^0-9.]/g, '');

    // Replace leading zero with the first digit entered
    if (input.value.length > 1 && input.value.startsWith('0') && !input.value.startsWith('0.')) {
        input.value = input.value.substring(1);
    }

    // Ensure only one decimal point
    var decimalCount = (input.value.match(/\./g) || []).length;
    if (decimalCount > 1) {
        input.value = input.value.slice(0, -1);
    }

    // Ensure only two decimal placesad
    if (input.value.includes('.')) {
        var parts = input.value.split('.');
        if (parts[1].length > 2) {
            input.value = parts[0] + '.' + parts[1].slice(0, 2);
        }
    }
}

        var errMessage = '@TempData["ErrorMessage"]';
        var addSuccess = '@TempData["SuccessMessage"]';
        if (errMessage) {
            toastr.error(errMessage);
        }
        if (addSuccess) {
            toastr.success(addSuccess);
        }
    </script>
}